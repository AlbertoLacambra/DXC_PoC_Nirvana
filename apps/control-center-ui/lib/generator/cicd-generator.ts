/**
 * CI/CD Generator
 * 
 * Generates CI/CD pipeline files for different providers:
 * - Azure Pipelines
 * - GitHub Actions
 * - GitLab CI
 */

import { FileToGenerate } from './file-generator';
import { ProjectType } from './template-manager';

// =============================================================================
// Types
// =============================================================================

export type CiCdProvider = 'azure-pipelines' | 'github-actions' | 'gitlab-ci';

// =============================================================================
// CI/CD Templates
// =============================================================================

/**
 * Generate CI/CD pipeline files
 */
export function generateCiCdPipeline(
  provider: CiCdProvider,
  projectType: ProjectType,
  projectName: string
): FileToGenerate[] {
  switch (provider) {
    case 'azure-pipelines':
      return generateAzurePipeline(projectType, projectName);
    case 'github-actions':
      return generateGitHubActions(projectType, projectName);
    case 'gitlab-ci':
      return generateGitLabCI(projectType, projectName);
    default:
      return [];
  }
}

// =============================================================================
// Azure Pipelines
// =============================================================================

function generateAzurePipeline(projectType: ProjectType, projectName: string): FileToGenerate[] {
  const isNodeProject = ['nextjs-app', 'react-spa', 'nodejs-microservice'].includes(projectType);
  const isPythonProject = ['python-api', 'azure-function'].includes(projectType);
  const isTerraform = projectType === 'terraform-infra';
  
  let content = `# Azure Pipeline for ${projectName}
# Generated by DXC Cloud Mind Platform

trigger:
  branches:
    include:
      - main
      - master
      - develop

pool:
  vmImage: 'ubuntu-latest'

stages:
`;
  
  if (isNodeProject) {
    content += `  - stage: Build
    jobs:
      - job: BuildAndTest
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js'
          
          - script: npm ci
            displayName: 'Install dependencies'
          
          - script: npm run build
            displayName: 'Build'
          
          - script: npm run lint
            displayName: 'Lint'
            continueOnError: true
`;
  }
  
  if (isPythonProject) {
    content += `  - stage: Build
    jobs:
      - job: BuildAndTest
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.11'
            displayName: 'Use Python 3.11'
          
          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Install dependencies'
          
          - script: python -m pytest
            displayName: 'Run tests'
            continueOnError: true
`;
  }
  
  if (isTerraform) {
    content += `  - stage: Plan
    jobs:
      - job: TerraformPlan
        steps:
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'
          
          - script: terraform init
            displayName: 'Terraform Init'
          
          - script: terraform validate
            displayName: 'Terraform Validate'
          
          - script: terraform plan
            displayName: 'Terraform Plan'
`;
  }
  
  return [
    {
      path: 'azure-pipelines.yml',
      content,
      overwrite: false,
    },
  ];
}

// =============================================================================
// GitHub Actions
// =============================================================================

function generateGitHubActions(projectType: ProjectType, projectName: string): FileToGenerate[] {
  const isNodeProject = ['nextjs-app', 'react-spa', 'nodejs-microservice'].includes(projectType);
  const isPythonProject = ['python-api', 'azure-function'].includes(projectType);
  const isTerraform = projectType === 'terraform-infra';
  
  let content = `# GitHub Actions CI for ${projectName}
# Generated by DXC Cloud Mind Platform

name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
`;
  
  if (isNodeProject) {
    content += `  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js \${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: \${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
      
      - name: Lint
        run: npm run lint
        continue-on-error: true
`;
  }
  
  if (isPythonProject) {
    content += `  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python \${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: \${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        run: pytest
        continue-on-error: true
`;
  }
  
  if (isTerraform) {
    content += `  plan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Validate
        run: terraform validate
      
      - name: Terraform Plan
        run: terraform plan
`;
  }
  
  return [
    {
      path: '.github/workflows/ci.yml',
      content,
      overwrite: false,
    },
  ];
}

// =============================================================================
// GitLab CI
// =============================================================================

function generateGitLabCI(projectType: ProjectType, projectName: string): FileToGenerate[] {
  const isNodeProject = ['nextjs-app', 'react-spa', 'nodejs-microservice'].includes(projectType);
  const isPythonProject = ['python-api', 'azure-function'].includes(projectType);
  const isTerraform = projectType === 'terraform-infra';
  
  let content = `# GitLab CI for ${projectName}
# Generated by DXC Cloud Mind Platform

stages:
  - build
  - test

`;
  
  if (isNodeProject) {
    content += `image: node:20

cache:
  paths:
    - node_modules/

before_script:
  - npm ci

build:
  stage: build
  script:
    - npm run build
  artifacts:
    paths:
      - dist/
      - .next/
    expire_in: 1 week

lint:
  stage: test
  script:
    - npm run lint
  allow_failure: true
`;
  }
  
  if (isPythonProject) {
    content += `image: python:3.11

cache:
  paths:
    - .pip-cache/

before_script:
  - pip install --cache-dir .pip-cache -r requirements.txt

test:
  stage: test
  script:
    - pytest
  allow_failure: true
`;
  }
  
  if (isTerraform) {
    content += `image:
  name: hashicorp/terraform:latest
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

cache:
  paths:
    - .terraform/

before_script:
  - terraform init

validate:
  stage: build
  script:
    - terraform validate

plan:
  stage: build
  script:
    - terraform plan
  artifacts:
    paths:
      - plan.tfplan
    expire_in: 1 week
`;
  }
  
  return [
    {
      path: '.gitlab-ci.yml',
      content,
      overwrite: false,
    },
  ];
}
