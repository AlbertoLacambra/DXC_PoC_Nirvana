/**
 * Git Initializer
 * 
 * Initialize Git repository and create initial commit.
 * Uses simple-git for Git operations.
 */

import simpleGit, { SimpleGit } from 'simple-git';
import * as path from 'path';

// =============================================================================
// Types
// =============================================================================

export interface GitInitResult {
  success: boolean;
  commitHash?: string;
  error?: string;
}

// =============================================================================
// Git Operations
// =============================================================================

/**
 * Initialize a Git repository in the project directory
 */
export async function initializeGit(
  projectPath: string,
  projectName: string
): Promise<GitInitResult> {
  try {
    const git: SimpleGit = simpleGit(projectPath);
    
    // Initialize repository
    await git.init();
    
    // Configure user (use generic info for generated projects)
    await git.addConfig('user.name', 'DXC Cloud Mind', false, 'local');
    await git.addConfig('user.email', 'cloudmind@dxc.com', false, 'local');
    
    // Add all files
    await git.add('.');
    
    // Create initial commit
    const commitResult = await git.commit(
      `Initial commit: ${projectName}\n\nGenerated by DXC Cloud Mind Spec-Driven Development Platform`
    );
    
    return {
      success: true,
      commitHash: commitResult.commit,
    };
  } catch (error: any) {
    return {
      success: false,
      error: error.message || 'Failed to initialize Git repository',
    };
  }
}

/**
 * Check if directory is already a Git repository
 */
export async function isGitRepository(projectPath: string): Promise<boolean> {
  try {
    const git: SimpleGit = simpleGit(projectPath);
    await git.status();
    return true;
  } catch {
    return false;
  }
}

/**
 * Get current Git status
 */
export async function getGitStatus(projectPath: string): Promise<{
  isRepo: boolean;
  branch?: string;
  commits?: number;
}> {
  try {
    const git: SimpleGit = simpleGit(projectPath);
    const status = await git.status();
    const log = await git.log();
    
    return {
      isRepo: true,
      branch: status.current || undefined,
      commits: log.total,
    };
  } catch {
    return {
      isRepo: false,
    };
  }
}
